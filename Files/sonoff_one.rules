import org.eclipse.smarthome.model.script.ScriptServiceUtil

val String Ip = '192.168.1.9'      // Ip of Sonoff or mDNS eWeLink_100098757f.local
val String Deviceid = '100098757f'              // Can get from DIY tool 

//-----------------------------------------------------Item Name
val sonoff = ScriptServiceUtil.getItemRegistry.getItem("sonoff_one")
val startup = ScriptServiceUtil.getItemRegistry.getItem("sonoff_one_startup")
val pulse = ScriptServiceUtil.getItemRegistry.getItem("sonoff_one_pulse")
val pulseWidth = ScriptServiceUtil.getItemRegistry.getItem("sonoff_one_pulseWidth")
val ssid = ScriptServiceUtil.getItemRegistry.getItem("sonoff_one_ssid")
val otaUnlock = ScriptServiceUtil.getItemRegistry.getItem("sonoff_one_otaUnlock")
var String Last_update

rule "Sonoff_one control Rule"

  when
    Item sonoff_one received command  // The Item name for your Switch 
  then
  
  try {

      var CommandState = sonoff.state.toString.toLowerCase   
      var CommandURL = 'http://' + Ip +':8081/zeroconf/switch'
      var String CommandData = '{"deviceid": "' + Deviceid + '", "data": {"switch": "' + CommandState + '"}}'
      var String UpdateResult
      var Number Attempts = 0
      var CommandExec = 'curl@@-sSH@@"Accept: */*"@@-H@@"Content-Type: text/plain"@@-X@@POST@@-d@@' + CommandData + '@@' + CommandURL
    
    do {
      Attempts += 1
      // logInfo("Sonoff command", CommandData)
      UpdateResult = executeCommandLine(CommandExec, 1500)
        
      if (UpdateResult.contains('"error":0')) { logInfo("Sonoff ID:"+ Deviceid +" Control", "IP: " + Ip + " Turned: " + CommandState) } // Success
     
  
    } while (!UpdateResult.contains('"error":0') && Attempts < 3) // Attempt to send 5 times
  
    if (Attempts == 3) {
      logError("Sonoff control Rule", "3 failures updating Sonoff")
    }
          
    if (UpdateResult.contains('"error":400')) {
      logError("Sonoff ID:"+ Deviceid +" Error", "The operation failed and the request was formatted incorrectly. The request body is not a valid JSON format")
    } else if  (UpdateResult.contains('"error":401')) {
      logError("Sonoff Error", "The operation failed and the request was unauthorized. Device information encryption is enabled on the device, but the request is not encrypted")
    } else if (UpdateResult.contains('"error":404')) {
      logError("Sonoff Error", "The operation failed and the device does not exist. The device does not support the requested deviceid")
    } else if (UpdateResult.contains('"error":422')) {
      logError("Sonoff Error", "The operation failed and the request parameters are invalid. For example, the device does not support setting specific device information")
    }
    } 
    catch(Exception e){
        logError("Control", "Error occured in Control Rule! " + e.toString)
    }
 
end

rule "Sonoff_one Power ON state Rule"

  when
    Item sonoff_one_startup received command 
  then

  try {
    
      var CommandState = sonoff_one_startup.state 
      var CommandURL = 'http://' + Ip +':8081/zeroconf/startup'
      var String CommandData = '{"deviceid": "' + Deviceid + '", "data": {"startup": "' + CommandState + '"}}'
      var String UpdateResult
      var Number Attempts = 0
      var CommandExec = 'curl@@-sSH@@"Accept: */*"@@-H@@"Content-Type: text/plain"@@-X@@POST@@-d@@' + CommandData + '@@' + CommandURL

 
    do {
      Attempts += 1
      // logInfo("Sonoff command", CommandData)
      UpdateResult = executeCommandLine(CommandExec, 1500)
        
      if (UpdateResult.contains('"error":0')) { logInfo("Sonoff ID:"+ Deviceid +" Control", "IP: " + Ip + " Turned: " + CommandState) } // Success
     
  
    } while (!UpdateResult.contains('"error":0') && Attempts < 3) // Attempt to send 5 times
  
    if (Attempts == 3) {
      logError("Sonoff Power ON state Rule", "3 failures updating Sonoff")
    }
          
    if (UpdateResult.contains('"error":400')) {
      logError("Sonoff ID:"+ Deviceid +" Error", "The operation failed and the request was formatted incorrectly. The request body is not a valid JSON format")
    } else if  (UpdateResult.contains('"error":401')) {
      logError("Sonoff Error", "The operation failed and the request was unauthorized. Device information encryption is enabled on the device, but the request is not encrypted")
    } else if (UpdateResult.contains('"error":404')) {
      logError("Sonoff Error", "The operation failed and the device does not exist. The device does not support the requested deviceid")
    } else if (UpdateResult.contains('"error":422')) {
      logError("Sonoff Error", "The operation failed and the request parameters are invalid. For example, the device does not support setting specific device information")
    }
    } 
    catch(Exception e){
        logError("state", "Error occured in on state Rule! " + e.toString)
    }
 
end

rule "Sonoff_one Pulse Rule"

  when
    Item sonoff_one_pulse received command or 
    Item sonoff_one_pulseWidth received command
  then

  try {

      var CommandState = pulse.state 
      var CommandTime = pulseWidth.state.toString 
      var CommandURL = 'http://' + Ip +':8081/zeroconf/pulse'
      var String CommandData = '{"deviceid": "' + Deviceid + '", "data": {"pulse": "' + CommandState + '", "pulseWidth":' + CommandTime +'}}'
      var String UpdateResult
      var Number Attempts = 0
      var CommandExec = 'curl@@-sSH@@"Accept: */*"@@-H@@"Content-Type: text/plain"@@-X@@POST@@-d@@' + CommandData + '@@' + CommandURL

    do {
      Attempts += 1
      // logInfo("Sonoff command", CommandData)
      UpdateResult = executeCommandLine(CommandExec, 1500)
        
      if (UpdateResult.contains('"error":0')) { logInfo("Sonoff ID:"+ Deviceid +" Pulse", "IP: " + Ip + " State: " + CommandState + "  Time  :" + CommandTime) } // Success
     
  
    } while (!UpdateResult.contains('"error":0') && Attempts < 3) // Attempt to send 5 times
  
    if (Attempts == 3) {
      logError("Sonoff Pulse Rule", "3 failures updating Sonoff")
    }
          
    if (UpdateResult.contains('"error":400')) {
      logError("Sonoff ID:"+ Deviceid +" Error", "The operation failed and the request was formatted incorrectly. The request body is not a valid JSON format")
    } else if  (UpdateResult.contains('"error":401')) {
      logError("Sonoff Error", "The operation failed and the request was unauthorized. Device information encryption is enabled on the device, but the request is not encrypted")
    } else if (UpdateResult.contains('"error":404')) {
      logError("Sonoff Error", "The operation failed and the device does not exist. The device does not support the requested deviceid")
    } else if (UpdateResult.contains('"error":422')) {
      logError("Sonoff Error", "The operation failed and the request parameters are invalid. For example, the device does not support setting specific device information")
    }
    } 
    catch(Exception e){
       logError("pulse", "Error occured in Pulse Rule! " + e.toString)
    }

end

rule "Sonoff_one Polling"

  when
    Time cron "0/3 * * * * ?" // Run every 3 seconds
  then
  
  try {

        var CommandURL = 'http://' + Ip +':8081/zeroconf/info'
        var String CommandData = '{"deviceid": "'+ Deviceid +'", "data": {}}'
        var String UpdateResult
        var Number Attempts = 0
        var CommandExec = 'curl@@-sSH@@"Accept: */*"@@-H@@"Content-Type: text/plain"@@-X@@POST@@-d@@' + CommandData + '@@' + CommandURL
        var String JSONdata
        var String update_sswitch
        var String update_startup
        var String update_pulse
        var String update_pulseWidth
        var String update_ssid
        var String update_otaUnlock


    do {
        Attempts += 1
        // logInfo("Sonoff command", CommandData)
        UpdateResult = executeCommandLine(CommandExec, 1500)

      if (UpdateResult.contains('"error":0')) { 
        JSONdata = transform("JSONPATH", "$.data", UpdateResult)      
        // logInfo("Sonoff Poll JSONdata", JSONdata)


      if (JSONdata != Last_update) {
       
          update_sswitch = transform("JSONPATH", "$.switch", JSONdata)
          update_startup = transform("JSONPATH", "$.startup", JSONdata)
          update_pulse = transform("JSONPATH", "$.pulse", JSONdata)
          update_pulseWidth = transform("JSONPATH", "$.pulseWidth", JSONdata)
          update_ssid = transform("JSONPATH", "$.ssid", JSONdata)
          update_otaUnlock = transform("JSONPATH", "$.otaUnlock", JSONdata)

          if (update_sswitch != sonoff.state.toString.toLowerCase) {
            logInfo("sonoff switch", " Syncing state to " + update_sswitch)
            sonoff.postUpdate(update_sswitch.toString.toUpperCase)
          }

          if (update_startup != startup.state.toString) {
            logInfo("sonoff switch", " Syncing startup to " + update_startup)
            startup.postUpdate(update_startup.toString)
          }
          
          if (update_pulse != pulse.state.toString) {
            logInfo("sonoff switch", " Syncing pulse to " + update_pulse )
            pulse.postUpdate(update_pulse.toString)
          }
          
          if (update_pulseWidth != pulseWidth.state.toString) {
            logInfo("sonoff switch", " Syncing pulseWidth to " + update_pulseWidth + "ms")
            pulseWidth.postUpdate(update_pulseWidth.toString)
          }
          
          if (update_ssid != ssid.state.toString) {
            logInfo("sonoff switch", " Syncing ssid")
            ssid.postUpdate(update_ssid.toString)
          }
          
          if (update_otaUnlock != otaUnlock.state.toString) {
            logInfo("sonoff switch", " Syncing otaUnlock")
            otaUnlock.postUpdate(update_otaUnlock.toString)
          }
          
          Last_update = JSONdata
          }     
        }    
  
      } while (!UpdateResult.contains('"error":0') && Attempts < 2) // Attempt to send 2 times

    if (Attempts == 2) {
      logError("Sonoff Poll Switch", "2 failures polling sonoff_one ")
    }
      
        if (UpdateResult.contains('"error":400')) {
          logError("Sonoff ID:"+ Deviceid +" Error", "The operation failed and the request was formatted incorrectly. The request body is not a valid JSON format")
        } else if  (UpdateResult.contains('"error":401')) {
          logError("Sonoff Error", "The operation failed and the request was unauthorized. Device information encryption is enabled on the device, but the request is not encrypted")
        } else if (UpdateResult.contains('"error":404')) {
          logError("Sonoff Error", "The operation failed and the device does not exist. The device does not support the requested deviceid")
        }    else if (UpdateResult.contains('"error":422')) {
          logError("Sonoff Error", "The operation failed and the request parameters are invalid. For example, the device does not support setting specific device information")
        }
    
    }
    catch(Exception e){
      logError("Polling", "Error occured in Sonoff Poling Rule! " + e.toString)
    }

end  







